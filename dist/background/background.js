(()=>{"use strict";new class{constructor(){this.readerTabId=null,this.sourceTabId=null,this.setupMessageListener(),this.setupContextMenu(),console.log("Background script initialized")}setupMessageListener(){chrome.runtime.onMessage.addListener(((e,t,r)=>{console.log("Background received message:",e);try{switch(e.action){case"setSourceTab":this.sourceTabId=e.tabId,r({status:"success"});break;case"openReader":t.tab?.id&&(this.sourceTabId=t.tab.id),this.openReaderTab(e.text,e.title,e.metadata).then((()=>r({status:"success"}))).catch((e=>r({status:"error",error:e.message})));break;case"readSelection":this.sourceTabId&&this.sendMessageToTab(this.sourceTabId,{action:"readSelection"}).then((()=>r({status:"success"}))).catch((e=>r({status:"error",error:e.message})));break;case"stopReading":this.sourceTabId&&this.sendMessageToTab(this.sourceTabId,{action:"stopReading",closeReader:!0}).then((()=>r({status:"success"}))).catch((e=>r({status:"error",error:e.message})));break;case"pauseReading":this.sourceTabId&&this.sendMessageToTab(this.sourceTabId,{action:"pauseReading"}).then((()=>r({status:"success"}))).catch((e=>r({status:"error",error:e.message})));break;case"resumeReading":this.sourceTabId&&this.sendMessageToTab(this.sourceTabId,{action:"resumeReading"}).then((()=>r({status:"success"}))).catch((e=>r({status:"error",error:e.message})));break;case"readingStopped":e.closeReader&&(this.readerTabId&&(chrome.tabs.remove(this.readerTabId).catch(console.error),this.readerTabId=null),this.sourceTabId=null),r({status:"success"});break;case"updateReaderHighlight":this.readerTabId&&this.sendMessageToTab(this.readerTabId,{action:"highlightSentence",index:e.index,text:e.text}).then((()=>r({status:"success"}))).catch((e=>r({status:"error",error:e.message})));break;case"getSettings":chrome.storage.sync.get({voice:"Microsoft Server Speech Text to Speech Voice (en-US, AvaNeural)",speed:1},(e=>{console.log("Sending settings:",e),r(e)}));break;case"readFromIndex":return this.sourceTabId?(this.sendMessageToTab(this.sourceTabId,{action:"stopReading",closeReader:!1}).then((()=>{setTimeout((async()=>{try{this.sourceTabId&&(console.log("Sending readFromIndex to source tab:",e.index),await this.sendMessageToTab(this.sourceTabId,{action:"readFromIndex",index:e.index}),this.readerTabId&&await this.sendMessageToTab(this.readerTabId,{action:"readingStarted"}),r({status:"success"}))}catch(e){console.error("Error in readFromIndex:",e),this.readerTabId&&await this.sendMessageToTab(this.readerTabId,{action:"error",error:e instanceof Error?e.message:"Failed to start reading"}),r({status:"error",error:e instanceof Error?e.message:"Failed to start reading"})}}),100)})).catch((e=>{console.error("Error stopping current reading:",e),r({status:"error",error:e.message})})),!0):(r({status:"error",error:"No source tab found"}),!1);default:return r({status:"error",error:"Unknown action"}),!1}return!0}catch(e){return console.error("Error handling message:",e),r({status:"error",error:e instanceof Error?e.message:"Unknown error"}),!1}}))}setupContextMenu(){chrome.contextMenus.removeAll((()=>{chrome.contextMenus.create({id:"readSelection",title:"Read Selection",contexts:["selection"]})})),chrome.contextMenus.onClicked.addListener(((e,t)=>{"readSelection"===e.menuItemId&&t?.id&&(console.log("Context menu: Read selection clicked"),this.sendMessageToTab(t.id,{action:"readSelection"}).catch((e=>console.error("Failed to send readSelection message:",e))))}))}async openReaderTab(e,t,r){try{if(null!==this.readerTabId)try{if(await chrome.tabs.get(this.readerTabId))return console.log("Updating existing reader tab"),await chrome.tabs.update(this.readerTabId,{active:!0}),void await this.updateReaderContent(this.readerTabId,e,t,r)}catch(e){console.log("Previous reader tab no longer exists"),this.readerTabId=null}console.log("Creating new reader tab");const a=await chrome.tabs.create({url:chrome.runtime.getURL("reader/reader.html"),active:!0});if(!a.id)throw new Error("Failed to create reader tab");this.readerTabId=a.id,await new Promise(((s,o)=>{let n=0;const c=async()=>{try{await this.updateReaderContent(a.id,e,t,r),s()}catch(e){if(console.log(`Retry ${n+1}/20 failed:`,e),n++,n>=20)return void o(new Error("Failed to update reader content after multiple attempts"));setTimeout(c,200)}},i=(e,t)=>{e===a.id&&"complete"===t.status&&(chrome.tabs.onUpdated.removeListener(i),setTimeout(c,500))};chrome.tabs.onUpdated.addListener(i)}))}catch(e){throw console.error("Failed to open reader tab:",e),e}}async updateReaderContent(e,t,r,a){try{console.log("Attempting to update reader content for tab:",e),await chrome.tabs.get(e);const s=await this.sendMessageToTab(e,{action:"updateContent",content:t,title:r,metadata:a});if(!s)throw new Error("No response received from reader tab");if("error"===s.status)throw new Error(s.error||"Failed to update reader content");console.log("Reader content updated successfully")}catch(e){throw console.error("Failed to update reader content:",e),e}}async sendMessageToTab(e,t){try{return await chrome.tabs.sendMessage(e,t)}catch(t){throw console.error(`Failed to send message to tab ${e}:`,t),t}}async sendMessageToActiveTab(e){try{const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});if(t?.id)return console.log("Sending message to active tab:",e),await this.sendMessageToTab(t.id,e);throw new Error("No active tab found")}catch(e){throw console.error("Failed to send message to active tab:",e),e}}}})();