(()=>{"use strict";new class{constructor(){this.readerTabId=null,this.setupMessageListener(),this.setupContextMenu(),console.log("Background script initialized")}setupMessageListener(){chrome.runtime.onMessage.addListener(((e,t,a)=>{console.log("Background received message:",e);try{switch(e.action){case"openReader":this.openReaderTab(e.text,e.title,e.metadata).then((()=>a({status:"success"}))).catch((e=>a({status:"error",error:e.message})));break;case"readSelection":this.sendMessageToActiveTab({action:"readSelection"}).then((()=>a({status:"success"}))).catch((e=>a({status:"error",error:e.message})));break;case"stopReading":this.sendMessageToActiveTab({action:"stopReading"}).then((()=>a({status:"success"}))).catch((e=>a({status:"error",error:e.message})));break;case"pauseReading":this.sendMessageToActiveTab({action:"pauseReading"}).then((()=>a({status:"success"}))).catch((e=>a({status:"error",error:e.message})));break;case"resumeReading":this.sendMessageToActiveTab({action:"resumeReading"}).then((()=>a({status:"success"}))).catch((e=>a({status:"error",error:e.message})));break;case"getSettings":chrome.storage.sync.get({voice:"en-US-AvaNeural",speed:1},(e=>{console.log("Sending settings:",e),a(e)}));break;case"updateReaderHighlight":this.readerTabId?this.sendMessageToTab(this.readerTabId,{action:"highlightSentence",index:e.index,text:e.text}).then((()=>a({status:"success"}))).catch((e=>a({status:"error",error:e.message}))):a({status:"error",error:"Reader tab not found"});break;default:return a({status:"error",error:"Unknown action"}),!1}return!0}catch(e){return console.error("Error handling message:",e),a({status:"error",error:e instanceof Error?e.message:"Unknown error"}),!1}}))}setupContextMenu(){chrome.contextMenus.create({id:"readSelection",title:"Read Selection",contexts:["selection"]}),chrome.contextMenus.onClicked.addListener(((e,t)=>{"readSelection"===e.menuItemId&&t?.id&&(console.log("Context menu: Read selection clicked"),this.sendMessageToTab(t.id,{action:"readSelection"}).catch((e=>console.error("Failed to send readSelection message:",e))))}))}async openReaderTab(e,t,a){try{if(null!==this.readerTabId)try{if(await chrome.tabs.get(this.readerTabId))return console.log("Updating existing reader tab"),await chrome.tabs.update(this.readerTabId,{active:!0}),void await this.updateReaderContent(this.readerTabId,e,t,a)}catch(e){console.log("Previous reader tab no longer exists"),this.readerTabId=null}console.log("Creating new reader tab");const s=await chrome.tabs.create({url:chrome.runtime.getURL("reader/reader.html"),active:!0});s.id&&(this.readerTabId=s.id,await new Promise(((r,o)=>{const n=(c,i)=>{c===s.id&&"complete"===i.status&&(chrome.tabs.onUpdated.removeListener(n),setTimeout((async()=>{try{await this.updateReaderContent(c,e,t,a),r()}catch(e){o(e)}}),100))};chrome.tabs.onUpdated.addListener(n)})))}catch(e){throw console.error("Failed to open reader tab:",e),e}}async updateReaderContent(e,t,a,s){try{await this.sendMessageToTab(e,{action:"updateContent",content:t,title:a,metadata:s})}catch(e){throw console.error("Failed to update reader content:",e),e}}async sendMessageToTab(e,t){try{return await chrome.tabs.sendMessage(e,t)}catch(t){throw console.error(`Failed to send message to tab ${e}:`,t),t}}async sendMessageToActiveTab(e){try{const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});if(t?.id)return console.log("Sending message to active tab:",e),await this.sendMessageToTab(t.id,e);throw new Error("No active tab found")}catch(e){throw console.error("Failed to send message to active tab:",e),e}}}})();